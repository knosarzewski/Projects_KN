"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Solc = void 0;
const os_1 = __importDefault(require("os"));
const utils_1 = require("./utils");
const path_1 = require("path");
const fs_1 = require("fs");
const extract_zip_1 = __importDefault(require("extract-zip"));
const rimraf = __importStar(require("rimraf"));
class Solc {
    constructor(release, versionsDirectory) {
        this.matches = (version) => {
            return this.releaseMeta.tag_name === version || this.releaseMeta.tag_name.substring(1) === version;
        };
        this.toString = (showInstalled = false) => {
            return `${this.releaseMeta.tag_name}${(showInstalled && this.installed() && ' (installed)') || ''}`;
        };
        this.installed = () => {
            return fs_1.existsSync(this.installPath);
        };
        this.isCompatible = () => {
            return this.getInstallStructure().asset != undefined;
        };
        this.getInstallStructure = () => {
            if (os_1.default.type() === 'Darwin') {
                return {
                    asset: this.releaseMeta.assets.find(i => ['solc-macos', 'solc_mac'].indexOf(i.name) !== -1),
                    postInstall: (path) => __awaiter(this, void 0, void 0, function* () {
                        fs_1.chmodSync(path, '0755');
                        fs_1.renameSync(path, path_1.join(path_1.dirname(path), 'solc'));
                    }),
                };
            }
            else if (os_1.default.type() === 'Windows_NT') {
                return {
                    asset: this.releaseMeta.assets.find(i => ['solc-windows.exe', 'solc-windows.zip', 'solidity-windows.zip'].indexOf(i.name) !== -1),
                    postInstall: (path) => __awaiter(this, void 0, void 0, function* () {
                        if (path.endsWith('.zip')) {
                            yield extract_zip_1.default(path, { dir: path_1.dirname(path) });
                        }
                        else {
                            fs_1.renameSync(path, path_1.join(path_1.dirname(path), 'solc.exe'));
                        }
                    }),
                };
            }
            return {
                asset: this.releaseMeta.assets.find(i => i.name === 'solc-static-linux'),
                postInstall: (path) => __awaiter(this, void 0, void 0, function* () {
                    fs_1.chmodSync(path, '0755');
                    fs_1.renameSync(path, path_1.join(path_1.dirname(path), 'solc'));
                }),
            };
        };
        this.install = () => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const installData = this.getInstallStructure();
            const downloadUrl = (_a = installData.asset) === null || _a === void 0 ? void 0 : _a.browser_download_url;
            if (downloadUrl !== undefined) {
                console.log(`Downloading and installing ${downloadUrl}`);
                if (!fs_1.existsSync(this.installPath))
                    fs_1.mkdirSync(this.installPath, { recursive: true });
                const fileName = path_1.normalize(path_1.join(this.installPath, path_1.basename(downloadUrl)));
                yield utils_1.download(downloadUrl, fileName, progress => {
                    utils_1.writeProgress(`Downloading: ${progress}%`);
                });
                console.log('');
                installData.postInstall(fileName);
                fs_1.writeFileSync(path_1.join(this.installPath, 'meta.json'), JSON.stringify(this.releaseMeta));
            }
            else {
                console.log(`Could not find a download URL for version ${this.releaseMeta.tag_name} for your current platform. Are you sure version ${this.releaseMeta.tag_name} appears in "svm ls-remote"?`);
            }
        });
        this.uninstall = () => {
            if (this.installed()) {
                rimraf.sync(this.installPath);
            }
        };
        this.pathString = () => {
            return [
                this.installPath,
                ...process.env.PATH.split(path_1.delimiter).filter(i => !i.startsWith(this.versionsDirectory)),
            ].join(path_1.delimiter);
        };
        this.useProcess = () => {
            process.env.PATH = this.pathString();
            return 'native';
        };
        this.releaseMeta = release;
        this.versionsDirectory = versionsDirectory;
        this.installPath = path_1.join(versionsDirectory, this.releaseMeta.tag_name);
    }
}
exports.Solc = Solc;
