#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instance = void 0;
const Path = __importStar(require("path"));
const clime_1 = require("clime");
const fs_1 = require("fs");
const os_1 = require("os");
class Cli {
    constructor() {
        this.settings = fs_1.existsSync(Cli.settingsFile)
            ? JSON.parse(fs_1.readFileSync(Cli.settingsFile, 'utf8'))
            : { lastUsed: undefined, aliases: {} };
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const cli = new clime_1.CLI('svm', Path.join(__dirname, 'commands'));
            const shim = new clime_1.Shim(cli);
            yield shim.execute(process.argv);
            fs_1.writeFileSync(Cli.settingsFile, JSON.stringify(this.settings));
        });
    }
}
exports.default = Cli;
Cli.settingsFile = Path.join(os_1.homedir(), '.svm', 'settings.json');
const cli = new Cli();
if (require.main === module) {
    cli.run();
}
function instance() {
    return cli;
}
exports.instance = instance;
