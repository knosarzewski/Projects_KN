"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const clime_1 = require("clime");
const fs_1 = require("fs");
const solc_versions_1 = require("../../solc-versions");
const cli_1 = require("../cli");
let Use = class Use extends clime_1.Command {
    execute(version) {
        return __awaiter(this, void 0, void 0, function* () {
            const solcToUse = new solc_versions_1.SolcVersions().getLocalVersions().find(i => i.matches(version));
            if (solcToUse) {
                cli_1.instance().settings.lastUsed = solcToUse.releaseMeta.tag_name;
                const activateCommand = `export PATH=${solcToUse.pathString()}`;
                const tempFile = process.env.TEMP_FILE;
                if (tempFile) {
                    fs_1.writeFileSync(tempFile, activateCommand);
                    return `Version ${solcToUse.releaseMeta.tag_name} activated successfully`;
                }
                return activateCommand;
            }
            return 'The specified version is not installed';
        });
    }
};
__decorate([
    __param(0, clime_1.param({
        description: 'The version to use',
        required: true,
    })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], Use.prototype, "execute", null);
Use = __decorate([
    clime_1.command({
        description: 'Use a specific solc version in the current shell',
    })
], Use);
exports.default = Use;
