"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
let lockObjectToPromiseMapping = new Map();
function _lock(object, handler) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield lockObjectToPromiseMapping.get(object);
        }
        catch (error) { }
        return handler();
    });
}
/**
 * A simple asynchronous lock that helps queueing operations.
 */
function lock(object, handler) {
    return __awaiter(this, void 0, void 0, function* () {
        let ret = _lock(object, handler);
        lockObjectToPromiseMapping.set(object, ret);
        return ret;
    });
}
exports.lock = lock;
/**
 * Run tasks in parallel, similar to `v.map` but not mean to transform.
 */
function parallel(values, handler, concurrency) {
    return __awaiter(this, void 0, void 0, function* () {
        yield _1.map(values, handler, concurrency);
    });
}
exports.parallel = parallel;
/**
 * Race tasks and fulfill or reject as soon as one of them fulfills or rejects.
 */
function race(values, transformer) {
    return __awaiter(this, void 0, void 0, function* () {
        return Promise.race(values.map(transformer));
    });
}
exports.race = race;
//# sourceMappingURL=concurrency.js.map