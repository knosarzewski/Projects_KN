import { NodeStyleCallback } from './';
export declare type NodeStyleAsyncFunction<T> = ((callback: NodeStyleCallback<T>) => any) | ((arg0: any, callback: NodeStyleCallback<T>) => any) | ((arg0: any, arg1: any, callback: NodeStyleCallback<T>) => any) | ((arg0: any, arg1: any, arg2: any, callback: NodeStyleCallback<T>) => any) | ((arg0: any, arg1: any, arg2: any, arg3: any, callback: NodeStyleCallback<T>) => any) | Function;
/**
 * Call a Node.js-style asynchronous function and return a correspondent
 * promise.
 */
export declare function call<T>(fn: NodeStyleAsyncFunction<T>, ...args: any[]): Promise<T>;
export declare type AsyncFunction<T> = (...args: any[]) => Promise<T>;
/**
 * Wrap a Node.js-style asynchronous function to a function that returns
 * promise.
 */
export declare function async<T>(fn: NodeStyleAsyncFunction<T>): AsyncFunction<T>;
