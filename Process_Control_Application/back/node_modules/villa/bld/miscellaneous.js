"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A no-operation function that acts as the rejection handler of a promise.
 */
function bear(error) {
    return undefined;
}
exports.bear = bear;
/**
 * Create a promise that will be fulfilled in given duration (milliseconds).
 * @param duration Duration in milliseconds before the promise gets fulfilled.
 */
function sleep(duration) {
    return new Promise(resolve => setTimeout(resolve, duration));
}
exports.sleep = sleep;
/**
 * Retry procedure in the handler for several times.
 * @param handler Retry handler.
 * @param options Retry options.
 * @return Created promise.
 */
function retry(handler, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        let { limit = 3, interval = 0 } = options;
        let lastError;
        for (let i = 0; i < limit; i++) {
            try {
                return yield handler(lastError, i);
            }
            catch (error) {
                lastError = error;
            }
            yield sleep(interval);
        }
        throw lastError;
    });
}
exports.retry = retry;
//# sourceMappingURL=miscellaneous.js.map